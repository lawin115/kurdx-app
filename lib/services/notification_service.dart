// lib/services/notification_service.dart

import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:kurdpoint/models/utils/notification_manager.dart';
import 'package:provider/provider.dart';

// ===== import-Û•Ú©Ø§Ù† Ø¨Û• Ø´ÛŽÙˆØ§Ø²ÛŒ Ø¯Ø±ÙˆØ³Øª Ù†ÙˆÙˆØ³Ø±Ø§ÙˆÙ† =====
import 'package:kurdpoint/providers/auth_provider.dart';
import 'package:kurdpoint/providers/notification_provider.dart';
import 'package:kurdpoint/auction_detail_screen.dart';

import './api_service.dart';

class NotificationService {
  // Singleton Pattern
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  // Ú©Ù„Ø§Ø³Û• Ù¾ÛŽÙˆÛŒØ³ØªÛ•Ú©Ø§Ù†
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final ApiService _apiService = ApiService();

  // Ú©Ù„ÛŒÙ„ÛŒ Ú¯Ø´ØªÛŒ Ø¨Û† Ú¯Û•ÛŒØ´ØªÙ† Ø¨Û• Navigator
  static final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

  // Ñ„ÑƒÐ½ÐºÑ†IAÛŒ Ø³Û•Ø±Û•ki Ø¨Û† Ú†Ø§Ù„Ø§Ú©Ú©Ø±Ø¯Ù†
  Future<void> initialize(String? token) async {
    // 1. ÙˆÛ•Ø±Ú¯Ø±ØªÙ†ÛŒ Ú•ÛŽÚ¯Û•Ù¾ÛŽØ¯Ø§Ù†
    await _firebaseMessaging.requestPermission();
    
    // 2. Ú¯ÙˆÛŽÚ¯Ø±Û•Ú©Ø§Ù† Ø¯Ø§Ø¨Ù†ÛŽ
    _setupMessageListeners();

    // 3. ÙˆÛ•Ø±Ú¯Ø±ØªÙ†ÛŒ ØªÛ†Ú©Ù† Ùˆ Ù†Ø§Ø±Ø¯Ù†ÛŒ Ø¨Û† Ø³ÛŽØ±Ú¤Û•Ø± (Ø¦Û•Ú¯Û•Ø± Ù„Û†Ú¯ÛŒÙ† Ø¨ÙˆÙˆØ¨ÙˆÙˆ)
    final context = navigatorKey.currentContext;
    if (context != null) {
      final token = Provider.of<AuthProvider>(context, listen: false).token;
      if (token != null) {
        final fcmToken = await _firebaseMessaging.getToken();
        print("ðŸ”” FCM Token: $fcmToken");
        if (fcmToken != null) {
          await _sendTokenToServer(fcmToken, token);
        }

        _firebaseMessaging.onTokenRefresh.listen((newToken) {
          print("ðŸ”” FCM Token Refreshed: $newToken");
          _sendTokenToServer(newToken, token);
        });
      }
    }
  }

  // --- Ñ„ÑƒÐ½ÐºÑ†IA ÛŒØ§Ø±Ù…Û•ØªÛŒØ¯Û•Ø±Û•Ú©Ø§Ù† ---

  Future<void> _sendTokenToServer(String fcmToken, String apiToken) async {
    try {
      await _apiService.updateFCMToken(fcmToken, apiToken);
    } catch (e) {
      print("!!! Failed to send FCM token to server: $e");
    }
  }

  void _setupMessageListeners() {
    // 1. Ú©Ø§ØªÛŽÚ© Ø¦Û•Ù¾Û•Ú©Û• Ú©Ø±Ø§ÙˆÛ•ÛŒÛ• (Foreground)
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print("Foreground message received!");
      
      // Ù¾ÛŒØ´Ø§Ù†Ø¯Ø§Ù†ÛŒ Flushbar
      NotificationManager.showInAppNotification(message);

      // Ù†ÙˆÛŽÚ©Ø±Ø¯Ù†Û•ÙˆÛ•ÛŒ Badge Ùˆ Ù„ÛŒØ³ØªÛŒ Ø¦Ø§Ú¯Ø§Ø¯Ø§Ø±Ú©Ø±Ø¯Ù†Û•ÙˆÛ•Ú©Ø§Ù†
      final context = navigatorKey.currentContext;
      if (context != null) {
        final token = Provider.of<AuthProvider>(context, listen: false).token;
        if (token != null) {
           Provider.of<NotificationProvider>(context, listen: false).fetchNotifications(token);
        }
      }
    });

    // 2. Ú©Ø§ØªÛŽÚ© Ú©Ù„ÛŒÚ© Ù„Û• Ø¦Ø§Ú¯Ø§Ø¯Ø§Ø±Ú©Ø±Ø¯Ù†Û•ÙˆÛ•Ú©Û• Ø¯Û•Ú©Ø±ÛŽØª (Ù„Û• background)
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print("Message tapped (from background)!");
      handleMessageNavigation(message.data);
    });

    // 3. Ú©Ø§ØªÛŽÚ© Ø¦Û•Ù¾Û•Ú©Û• Ù„Û• Ø¯Û†Ø®ÛŒ Ø¯Ø§Ø®Ø±Ø§Ùˆ (terminated) Ø¯Û•Ú©Ø±ÛŽØªÛ•ÙˆÛ•
    FirebaseMessaging.instance.getInitialMessage().then((RemoteMessage? message) {
      if (message != null) {
        print("App launched from terminated state by notification!");
        handleMessageNavigation(message.data);
      }
    });
  }

  // ===== Ú†Ø§Ø±Û•Ø³Û•Ø±ÛŒ Ù‡Û•ÚµÛ•ÛŒ 'private' =====
  // Ø¦Û•Ù… Ñ„ÑƒÐ½ÐºÑ†IAÛŒÛ• PublicÙ€Û•
  void handleMessageNavigation(Map<String, dynamic> data) {
    final auctionId = data['auction_id'];
    if (auctionId != null) {
      final context = navigatorKey.currentContext;
      if (context != null) {
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (_) => AuctionDetailScreen(auctionId: int.parse(auctionId)),
          ),
        );
      }
    }
  }
}